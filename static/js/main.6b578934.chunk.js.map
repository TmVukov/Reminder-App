{"version":3,"sources":["firebase.js","StateProvider.js","utils/utils.js","components/Alarm/Alarm.js","components/Form/Form.js","hooks/removeHook.js","components/Reminder/Reminder.js","components/Notification/Notification.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","firestore","StateContext","createContext","StateProvider","children","useState","title","setTitle","description","setDescription","reminders","setReminders","alarmDate","setAlarmDate","alarmTime","setAlarmTime","alarmStart","setAlarmStart","intervalID","setIntervalID","newIntervalID","setNewIntervalID","alarmDisplay","setAlarmDisplay","savedAlarms","setSavedAlarms","color","setColor","Provider","value","convertDateToMs","alarms","map","e","split","join","Date","parse","ReactCalendar","discarded","setDiscarded","useContext","compareInputTime","todayDate","toLocaleDateString","console","log","todayTime","toLocaleTimeString","Audio","play","useEffect","collection","get","then","snap","forEach","doc","push","data","flat","compareDatabaseTime","useCallback","clonedAlarms","sort","a","b","alarmsInMs","firstAlarm","Math","min","dbDate","dbTime","length","interval","setInterval","autoRemoveReminder","orderBy","limit","empty","docs","ref","delete","splice","clonedNewIntervals","clearInterval","clonedIntervals","timer","setTimeout","clearTimeout","className","locale","tileClassName","onChange","clearIcon","disableClock","hourPlaceholder","minutePlaceholder","some","getTime","slice","disabled","onClick","display","prevDisplay","prevInterval","Form","open","setOpen","type","placeholder","maxLength","target","width","circleSize","onChangeComplete","hex","add","RemoveReminderHook","id","i","removedIntervals","filteredIntervals","filter","filteredAlarms","Reminder","editTitle","setEditTitle","editDescription","setEditDescription","setId","onSnapshot","reminder","removeCallback","useRemoveReminder","style","borderColor","autoFocus","update","updateTitle","handleTitle","updateDescription","handleDescription","alarm","Notification","colors","div","backgroundColor","animate","translateX","includes","App","bounce","duration","yoyo","Infinity","ease","transition","y","variants","opacity","closed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VAcEA,IAASC,cAVI,CACXC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAIT,IAEaC,EAFIT,IAASU,Y,oDCbfC,EAAeC,0BAEb,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,SAAW,EACpBC,mBAAS,IADW,mBACvCC,EADuC,KAChCC,EADgC,OAERF,mBAAS,IAFD,mBAEvCG,EAFuC,KAE1BC,EAF0B,OAGZJ,mBAAS,IAHG,mBAGvCK,EAHuC,KAG5BC,EAH4B,OAIZN,mBAAS,IAJG,mBAIvCO,EAJuC,KAI5BC,EAJ4B,OAKZR,mBAAS,IALG,mBAKvCS,EALuC,KAK5BC,EAL4B,OAMVV,oBAAS,GANC,mBAMvCW,EANuC,KAM3BC,EAN2B,OAOVZ,mBAAS,IAPC,mBAOvCa,EAPuC,KAO3BC,EAP2B,OAQJd,mBAAS,IARL,mBAQvCe,EARuC,KAQxBC,EARwB,OASNhB,mBAAS,IATH,mBASvCiB,EATuC,KASzBC,EATyB,OAURlB,mBAAS,IAVD,mBAUvCmB,EAVuC,KAU1BC,EAV0B,OAWpBpB,mBAAS,IAXW,mBAWvCqB,EAXuC,KAWhCC,EAXgC,KAc9C,OACI,cAAC1B,EAAa2B,SAAd,CAAuBC,MAAO,CAC1BvB,QAAOC,WACPC,cAAaC,iBACbC,YAAWC,eACXC,YAAWC,eACXC,YAAWC,eACXC,aAAYC,gBACZC,aAAYC,gBACZC,gBAAeC,mBACfC,eAAcC,kBACdC,cAAaC,iBACbC,QAAOC,YAXX,SAaKvB,I,YChCA0B,EAAkB,SAACC,GAK5B,OAHsBA,EAAOC,KAAI,SAAAC,GAAC,OAAEA,EAAEC,MAAM,QAAMF,KAAI,SAAAC,GAAC,MAAG,CAACA,EAAE,GAAGA,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAAKE,KAAK,QAG/DH,KAAI,SAAAC,GAAC,OAAEG,KAAKC,MAAMJ,OCO9B,SAASK,IAAiB,IAAD,EACFjC,oBAAS,GADP,mBAC7BkC,EAD6B,KAClBC,EADkB,OAYhCC,qBAAWxC,GARXS,EAJgC,EAIhCA,UACAE,EALgC,EAKhCA,UAAWC,EALqB,EAKrBA,aACXC,EANgC,EAMhCA,UAAWC,EANqB,EAMrBA,aACXC,EAPgC,EAOhCA,WAAYC,EAPoB,EAOpBA,cACZC,EARgC,EAQhCA,WAAYC,EARoB,EAQpBA,cACZG,EATgC,EAShCA,aAAcC,EATkB,EASlBA,gBACdC,EAVgC,EAUhCA,YAAaC,EAVmB,EAUnBA,eACbL,EAXgC,EAWhCA,cAAcC,EAXkB,EAWlBA,iBAcZqB,EAAmB,WACrB,IAAIC,GAAY,IAAIP,MAAOQ,mBAAmB,SAC9CC,QAAQC,IAAIH,GAEZ,IAAII,GAAY,IAAIX,MAAOY,mBAAmB,UAC9CH,QAAQC,IAAIC,GAEQJ,IAAc/B,GACdmC,IAAcjC,KAGlB,IAAImC,MAAM,wBAChBC,OACNjC,GAAc,KAoCtBkC,qBAAU,WACNpD,EAASqD,WAAW,aAAaC,MAC5BC,MAAK,SAAAC,GACF,IAAIxB,EAAO,GACXwB,EAAKC,SAAQ,SAAAC,GAAG,OAAE1B,EAAO2B,KAAKD,EAAIE,OAAOrC,iBACzCG,EAAeM,EAAO6B,aAE/B,CAAC/C,EAAcE,EAAcU,IAGhC,IAAMoC,EAAsBC,uBAAY,WAGpC,IAAIC,EAAe,YAAIvC,GAAawC,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAIC,GAAK,EAAI,KAG1DC,EAAarC,EAAgBiC,GAG7BK,EAAaC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAGzBI,EAAS,IAAInC,KAAKgC,GAAYxB,mBAAmB,SACrDC,QAAQC,IAAIyB,GAGZ,IAAIC,EAAS,IAAIpC,KAAKgC,GAAYpB,mBAAmB,SACrDH,QAAQC,IAAI0B,GAEZ,IAAI7B,GAAY,IAAIP,MAAOQ,mBAAmB,SAC9CC,QAAQC,IAAIH,GAEZ,IAAII,GAAY,IAAIX,MAAOY,mBAAmB,UAC9CH,QAAQC,IAAIC,GAEQJ,IAAc4B,GACdxB,IAAcyB,KAGlB,IAAIvB,MAAM,wBAChBC,OAENjC,GAAc,MAGnB,CAACO,EAAaP,IAIjBkC,qBAAU,WACF,GAAG3B,EAAYiD,OAAQ,CACnB,IAAIC,EAAWC,YAAYd,EAAqB,KAChDxC,EAAiB,CAACqD,OAE3B,CAACb,EAAqBrC,EAAYiD,OAAQpD,IAI7C,IAAMuD,EAAqBd,uBAAY,WAUrC,GAPE/D,EAASqD,WAAW,aAAayB,QAAQ,gBAAgBC,MAAM,GAAGzB,MAAMC,MAAK,SAAAC,GAC3E,IAAIA,EAAKwB,MAEP,OADUxB,EAAKyB,KAAK,GACTC,IAAIC,YAIlB1D,EAAYiD,OAAO,CAEpB,IAAIV,EAAe,YAAIvC,GAAawC,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAIC,GAAK,EAAI,KAC9DH,EAAaoB,OAAO,EAAE,GACtB1D,EAAesC,GAGhB,IAAIqB,EAAkB,YAAOhE,GAC7BiE,cAAcD,EAAmBD,OAAO,EAAE,IAC1C9D,EAAiB+D,OAEd,CAEF,IAAIE,EAAe,YAAOpE,GAC1BmE,cAAcC,EAAgBH,OAAO,EAAE,IACvChE,EAAcmE,MAGf,CAAC9D,EAAaC,EAAgBP,EAAYC,EAAeC,EAAeC,IAmB3E,OAfA8B,qBAAU,WACN,GAAGnC,EAAY,CACZ,IAAIuE,EAAQC,YAAW,WAClBvE,GAAc,GACd2D,MACD,KAEH,OAAO,WACHa,aAAaF,OAGtB,CAACvE,EAAYC,EAAe2D,IAK3B,sBAAKc,UAAU,mBAAf,UAEI,cAAC,IAAD,CACIC,OAAO,KACPC,cAAe,CAAC,iBAAkB,qCAClCC,SA1KO,SAAChE,GAChBhB,EAAagB,EAAMe,mBAAmB,aA4KlC,cAAC,IAAD,CACIkD,UAAW,KACXC,cAAY,EACZC,gBAAgB,QAChBC,kBAAkB,UAClBJ,SA7KO,SAAAhE,GACfd,EAAac,EAAQ,QA6KbA,MAAOf,EACP8E,cAAe,CAAC,+BAGpB,sBAAKF,UAAU,iBAAf,UAGQ9E,GAAcE,IAAayB,EAC3B3B,GAAcE,EACdF,EACDF,EAAUwF,MAAK,SAAAjE,GAAC,OAAEA,EAAEX,aAAa,KAAOA,EAAa,MAAM,sDAC3DA,EAAamD,QAAU3C,EAAgBR,IAAgB,IAAIc,MAAO+D,UAAY,uEAC9E7E,EAAamD,OAAS,gDACtBnD,GAAgBR,EAAY,+CAAkBF,EAAlB,IAA8BE,EAAUsF,MAAM,EAAE,GAAhD,QAA4D,GAJ3E,oDADc,GADa,uEAUvCxF,GAAaE,GACb,gCACI,wBAAQ4E,UAAU,oBAAoBW,WAAU/E,EAAamD,OAA7D,SACI,cAAC,IAAD,CAAgB6B,QA3KrB,WACf,IAAIC,EAAO,UAAM3F,EAAN,YAAmBE,GAC9BS,GAAgB,SAAAiF,GAAW,4BAAOA,GAAP,CAAoBD,OAE/C,IAAI7B,EAAWC,YAAYjC,EAAkB,KAC7CvB,GAAc,SAAAsF,GAAY,4BAAOA,GAAP,CAAqB/B,OAE/ClC,GAAa,QAuKG,cAAC,IAAD,CAAgB8D,QAnKf,WACjB,GAAGhF,EAAamD,OAAO,CACnB,IAAIa,EAAe,YAAOpE,GACvBoE,EAAgBb,OAAS,GACxBY,cAAcC,EAAgBH,QAAQ,EAAE,IACxChE,EAAcmE,KAGdD,cAAcC,EAAgBH,OAAO,EAAG,IACxChE,EAAcmE,IAGtBzE,EAAa,MACbE,EAAa,MACbQ,EAAgB,IAChBiB,GAAa,IAoJ0CkD,UAAU,+B,qBC1N1D,SAASgB,IAAQ,IAAD,EACHrG,oBAAS,GADN,mBACpBsG,EADoB,KACdC,EADc,OAYvBnE,qBAAWxC,GAPXK,EALuB,EAKvBA,MAAOC,EALgB,EAKhBA,SACPC,EANuB,EAMvBA,YAAaC,EANU,EAMVA,eACba,EAPuB,EAOvBA,aAAcC,EAPS,EAOTA,gBACdV,EARuB,EAQvBA,aAAcE,EARS,EAQTA,aACdY,EATuB,EASvBA,SAAUD,EATa,EASbA,MACVR,EAVuB,EAUvBA,WACAR,EAXuB,EAWvBA,UA2BJ,OACI,sBAAKgF,UAAU,kBAAf,UACI,8CAEA,uBAAMA,UAAU,OAAhB,UACG,sBAAKA,UAAU,YAAf,UAEK,cAAC,IAAD,CAASA,UAAU,qBAEnB,uBACImB,KAAK,OACLC,YAAY,eACZC,UAAU,KACVlF,MAAOvB,EACPuF,SAAU,SAAA5D,GAAC,OAAE1B,EAAS0B,EAAE+E,OAAOnF,aAKvB,KAAfvB,EAAMmE,QAAe,mBAAGiB,UAAU,kBAAb,2DAEvB,sBAAKA,UAAU,YAAf,UACK,cAAC,IAAD,CAAeA,UAAU,2BAEzB,uBACImB,KAAK,OACLC,YAAY,qBACZC,UAAU,MACVlF,MAAOrB,EACPqF,SAAU,SAAA5D,GAAC,OAAExB,EAAewB,EAAE+E,OAAOnF,aAIvB,MAArBrB,EAAYiE,QAAgB,mBAAGiB,UAAU,wBAAb,qEAGjC,wBAAQA,UAAU,kBAAkBY,QAAS,kBAAIM,GAASD,IAA1D,0BAEEA,GAAQ,cAAC,IAAD,CAAcM,MAAM,QAAQC,WAAY,GAAIC,iBA3C7C,SAACzF,GACbC,EAASD,EAAM0F,QA4CZ,cAAC,EAAD,IAEA,wBACI1B,UAAU,YACVY,QAnES,WACjBvG,EAASqD,WAAW,aAAaiE,IAAI,CACjC/G,MAAOA,EACPE,YAAaA,EACbc,aAAcA,EACdJ,WAAYA,EAAWkF,OAAO,GAC9B1E,MAAOA,IAGXnB,EAAS,IACTE,EAAe,IACfI,EAAa,MACbE,EAAa,MACbQ,EAAgB,IAChBI,EAAS,KAsDD0E,aACK/E,EAAamD,QACd/D,EAAUwF,MAAK,SAAAjE,GAAC,OAAEA,EAAEX,aAAa,KAAOA,EAAa,OACrDQ,EAAgBR,IAAgB,IAAIc,MAAO+D,WANnD,8B,mBCtFG,SAASmB,IAAsB,IAAD,EASrC7E,qBAAWxC,GANXS,EAHqC,EAGrCA,UACAO,EAJqC,EAIrCA,cACAC,EALqC,EAKrCA,WAAYC,EALyB,EAKzBA,cACZC,EANqC,EAMrCA,cAAeC,EANsB,EAMtBA,iBACfE,EAPqC,EAOrCA,gBACAC,EARqC,EAQrCA,YAAaC,EARwB,EAQxBA,eAqCjB,OAjCuB,SAAC8F,EAAIC,GAExBzH,EAASqD,WAAW,aAAaK,IAAI8D,GAAIrC,SAIzC,IACIuC,EACAC,EAFApC,EAAe,YAAOpE,GAG1BuG,EAAmBnC,EAAgBqC,QAAO,SAAA1F,GAAC,OAAEA,IAAMvB,EAAU8G,GAAGtG,WAAW,MAC3EwG,EAAoBpC,EAAgBqC,QAAO,SAAA1F,GAAC,OAAEA,IAAMvB,EAAU8G,GAAGtG,WAAW,MAE5EmE,cAAcoC,GACdtG,EAAcuG,GAId,IAAItC,EAAkB,YAAOhE,GAE7BiE,cAAcD,EAAmBD,OAAO,EAAE,IAC1C9D,EAAiB+D,GAGjB,IACIwC,EADY,YAAOpG,GACWmG,QAAO,SAAA1F,GAAC,OAAEA,IAAMvB,EAAU8G,GAAGlG,aAAa,MAC5EG,EAAemG,GAGZlH,EAAUA,EAAU+D,OAAO,GAAG8C,KAAO7G,EAAU8G,GAAGD,IAAItG,GAAc,GAEvEM,EAAgB,KCzCT,SAASsG,IAAY,IAAD,EACGxH,oBAAS,GADZ,mBACxByH,EADwB,KACbC,EADa,OAEe1H,oBAAS,GAFxB,mBAExB2H,EAFwB,KAEPC,EAFO,OAGX5H,mBAAS,MAHE,mBAGxBkH,EAHwB,KAGpBW,EAHoB,OAU3BzF,qBAAWxC,GAHXK,EAP2B,EAO3BA,MAAOC,EAPoB,EAOpBA,SACPC,EAR2B,EAQ3BA,YAAaC,EARc,EAQdA,eACbC,EAT2B,EAS3BA,UAAWC,EATgB,EAShBA,aAKfwC,qBAAU,WACNpD,EAASqD,WAAW,aAAayB,QAAQ,eAAgB,QAAQsD,YAAW,SAAAC,GAAQ,OAChFzH,EAAayH,EAASpD,KAAKhD,KAAI,SAAAC,GAAC,kCAAOA,EAAE0B,QAAT,IAAiB4D,GAAItF,EAAEsF,cAE5D,CAAC5G,IAGJ,IAyBM0H,EAAiBC,IAGvB,OACI,sBAAK5C,UAAU,sBAAf,UACI,gDAGGhF,EAAUsB,KAAI,SAACoG,EAAUZ,GAAX,OACb,sBAAa9B,UAAU,gBAAgB6C,MAAO,CAACC,YAAaJ,EAAS1G,OAArE,UAEI,wBACIgE,UAAU,gBACVY,QAAS,kBAAI+B,EAAeD,EAASb,GAAIC,IAF7C,oBAQGM,GAAcP,IAAOa,EAASb,GAE7B,gCACI,uBACIV,KAAK,OACLC,YAAY,UACZC,UAAU,KACVlF,MAAOvB,EACPuF,SAAU,SAAA5D,GAAC,OAAE1B,EAAS0B,EAAE+E,OAAOnF,QAC/B4G,WAAS,IAGb,wBACInC,QAAS,kBA7CjB,SAACiB,GACjBxH,EAASqD,WAAW,aAAaK,IAAI8D,GAAImB,OAAO,CAACpI,MAAOA,IACxDyH,GAAa,GACbxH,EAAS,IA0C4BoI,CAAYP,EAASb,KAClC7B,UAAU,mBAFd,oBAOA,wBACIY,QAAS,kBAAIyB,GAAa,IAC1BrC,UAAU,mBAFd,uBASJ,qBACIY,QAAS,kBAzEb,SAACiB,GACjBW,EAAMX,GACNQ,GAAa,GAuEoBa,CAAYR,EAASb,KAClC7B,UAAU,kBAFd,SAIK0C,EAAS9H,QAKd0H,GAAoBT,IAAOa,EAASb,GAEpC,gCACI,0BACIV,KAAK,OACLC,YAAY,UACZC,UAAU,MACVlF,MAAOrB,EACPqF,SAAU,SAAA5D,GAAC,OAAExB,EAAewB,EAAE+E,OAAOnF,QACrC4G,WAAS,IAGb,wBACInC,QAAS,kBA3EX,SAACiB,GACvBxH,EAASqD,WAAW,aAAaK,IAAI8D,GAAImB,OAAO,CAAClI,YAAaA,IAC9DyH,GAAmB,GACnBxH,EAAe,IAwEsBoI,CAAkBT,EAASb,KACxC7B,UAAU,mBAFd,oBAOA,wBACIY,QAAS,kBAAI2B,GAAmB,IAChCvC,UAAU,mBAFd,uBAQJ,qBACIY,QAAS,kBAvGP,SAACiB,GACvBW,EAAMX,GACNU,GAAmB,GAqGca,CAAkBV,EAASb,KACxC7B,UAAU,wBAFd,SAIK0C,EAAS5H,cAQd4H,EAAS9G,aAAaU,KAAI,SAAC+G,EAAMvB,GAAP,OAC1B,4BACKuB,EAAM3C,MAAM,GAAG,IADZoB,QAvFNA,S,mBCvDX,SAASwB,IAEpB,IAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,WAFd,EAIDxG,qBAAWxC,GAArCS,EAJ2B,EAI3BA,UAAWM,EAJgB,EAIhBA,WAEbqH,EAAiBC,IAGvB,OACI,qBAAK5C,UAAU,0BAAf,SAEQhF,EAAUA,EAAU+D,OAAO,IAAMzD,GAC7B,eAAC,IAAOkI,IAAR,CACIxD,UAAU,eACV6C,MAAO,CAACY,gBAAiBzI,EAAUA,EAAU+D,OAAO,GAAG/C,OACvD0H,QAAS,CAAEC,WAAY,CAAC,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI3I,EAAU+D,OAAO,IAHxE,UAKI,oBACI8D,MACIU,EAAOK,SAAS5I,EAAUA,EAAU+D,OAAO,GAAG/C,OAC9C,CAACA,MAAO,WAAa,CAACA,MAAO,WAHrC,2BAMkB,uBACd,iCAEQhB,EAAUA,EAAU+D,OAAO,GAAGnE,MAAMmE,OAAS,GAC7C/D,EAAUA,EAAU+D,OAAO,GAAGnE,MAAM8F,MAAM,EAAE,IAAM,MAClD1F,EAAUA,EAAU+D,OAAO,GAAGnE,QAX1C,IAac,uBAbd,OAa4BI,EAAUA,EAAU+D,OAAO,GAAGnD,aAAa,GAAG8E,MAAM,GAAG,MAGnF,wBACIV,UAAU,oBACVY,QAAS,kBAAI+B,EAAe3H,EAAUA,EAAU+D,OAAO,GAAG8C,GAAI7G,EAAU+D,OAAO,IAC/E8D,MACIU,EAAOK,SAAS5I,EAAUA,EAAU+D,OAAO,GAAG/C,OAC9C,CAACA,MAAO,WAAa,CAACA,MAAO,WALrC,yB,YCsBT6H,MApDf,WAAgB,IAAD,EACWlJ,oBAAS,GADpB,mBACNsG,EADM,KACAC,EADA,KAQP4C,EAAS,CACbC,SAAU,GACVC,KAAMC,IACNC,KAAM,WAIR,OACE,sBAAKlE,UAAU,MAAf,UAGIiB,EAEA,cAAC,IAAD,CAAejB,UAAU,iBAAiBY,QAAS,kBAAIM,GAAQ,MAE/D,cAAC,IAAOsC,IAAR,CACExD,UAAU,gBACVmE,WAAYL,EACZJ,QAAS,CAACU,EAAG,CAAC,MAAO,SAHvB,SAKE,cAAC,IAAD,CAAcxD,QAAS,kBAAIM,GAAQ,QAIrC,eAAC,IAAOsC,IAAR,CACEE,QAASzC,EAAO,OAAS,SACzBoD,SA/BS,CACfpD,KAAM,CAAEqD,QAAS,EAAGF,EAAG,GACvBG,OAAQ,CAAED,QAAS,EAAGF,EAAG,SA8BnBpE,UAAU,iBAHZ,UAKI,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,SAIN,cAAC,EAAD,QClDRwE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjK,EAAD,UACA,cAAC,EAAD,QAGFkK,SAASC,eAAe,W","file":"static/js/main.6b578934.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBmxgjCOGiaA5AufjAs_qDfYGVa8Th0YWE\",\r\n    authDomain: \"habit-reminder-653cd.firebaseapp.com\",\r\n    databaseURL: \"https://habit-reminder-653cd.firebaseio.com\",\r\n    projectId: \"habit-reminder-653cd\",\r\n    storageBucket: \"habit-reminder-653cd.appspot.com\",\r\n    messagingSenderId: \"369945436017\",\r\n    appId: \"1:369945436017:web:f5d62a8f20ba0e9a1920d0\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(config);\r\n  const database = firebase.firestore()\r\n\r\nexport default database","import React, { useState, createContext } from 'react'\r\n\r\nexport const StateContext = createContext()\r\n\r\nexport default function StateProvider({children}) {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [reminders, setReminders] = useState([]) \r\n    const [alarmDate, setAlarmDate] = useState(\"\")\r\n    const [alarmTime, setAlarmTime] = useState(\"\")\r\n    const [alarmStart, setAlarmStart] = useState(false)\r\n    const [intervalID, setIntervalID] = useState([])\r\n    const [newIntervalID, setNewIntervalID] = useState([])    \r\n    const [alarmDisplay, setAlarmDisplay] = useState([])\r\n    const [savedAlarms, setSavedAlarms] = useState([])       \r\n    const [color, setColor] = useState(\"\")     \r\n   \r\n\r\n    return (\r\n        <StateContext.Provider value={{\r\n            title, setTitle, \r\n            description, setDescription, \r\n            reminders, setReminders,\r\n            alarmDate, setAlarmDate, \r\n            alarmTime, setAlarmTime, \r\n            alarmStart, setAlarmStart, \r\n            intervalID, setIntervalID,\r\n            newIntervalID, setNewIntervalID, \r\n            alarmDisplay, setAlarmDisplay,\r\n            savedAlarms, setSavedAlarms,            \r\n            color, setColor,         \r\n            }}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    )\r\n}","export const convertDateToMs = (alarms) =>{\r\n    //replace month and day (to convert it to ms)\r\n    let formattedAlarms = alarms.map(e=>e.split(\"/\")).map(e=>([e[1],e[0],e[2],e[3]]).join(\"/\"))                \r\n\r\n    //convert dates to ms\r\n    return formattedAlarms.map(e=>Date.parse(e))  \r\n}","import React, { useState, useContext, useEffect, useCallback } from 'react'\r\nimport \"./Alarm.css\"\r\nimport Calendar from 'react-calendar'\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport TimePicker from 'react-time-picker'\r\nimport { StateContext } from \"../../StateProvider\"\r\nimport database from \"../../firebase\"\r\nimport { AiOutlineCheck } from 'react-icons/ai'\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { convertDateToMs } from \"../../utils/utils\"\r\n\r\n\r\nexport default function ReactCalendar() {         \r\n    const [discarded, setDiscarded] = useState(false)\r\n\r\n    const {\r\n        reminders,        \r\n        alarmDate, setAlarmDate,\r\n        alarmTime, setAlarmTime, \r\n        alarmStart, setAlarmStart, \r\n        intervalID, setIntervalID, \r\n        alarmDisplay, setAlarmDisplay,        \r\n        savedAlarms, setSavedAlarms,        \r\n        newIntervalID,setNewIntervalID                       \r\n    } = useContext(StateContext)    \r\n   \r\n      \r\n    const selectDate = (value) =>{        \r\n        setAlarmDate(value.toLocaleDateString('en-GB'))                \r\n    }    \r\n    \r\n\r\n    const selectTime = value =>{              \r\n        setAlarmTime(value + \":00\")     \r\n    }    \r\n\r\n    \r\n    const compareInputTime = () =>{\r\n        let todayDate = new Date().toLocaleDateString('en-GB')        \r\n        console.log(todayDate)\r\n\r\n        let todayTime = new Date().toLocaleTimeString('en-GB')        \r\n        console.log(todayTime)\r\n\r\n        const isDateEqual = todayDate === alarmDate\r\n        const isTimeEqual = todayTime === alarmTime\r\n        \r\n        if(isDateEqual && isTimeEqual) {\r\n            let sound = new Audio(\"Audio/alarmSound.mp3\")                     \r\n            sound.play()\r\n            setAlarmStart(true)            \r\n        }        \r\n    }\r\n            \r\n        \r\n    const startAlarm = () =>{\r\n        let display = `${alarmDate}/${alarmTime}`                      \r\n        setAlarmDisplay(prevDisplay=>([...prevDisplay, display]))       \r\n        \r\n        let interval = setInterval(compareInputTime, 1000)        \r\n        setIntervalID(prevInterval=>([...prevInterval, interval]))      \r\n        \r\n        setDiscarded(false)        \r\n    }\r\n       \r\n\r\n    const discardAlarm = ()=>{\r\n        if(alarmDisplay.length){\r\n            let clonedIntervals = [...intervalID]\r\n            if(clonedIntervals.length > 1){\r\n                clearInterval(clonedIntervals.splice(-1,1))        \r\n                setIntervalID(clonedIntervals)\r\n            }       \r\n            else{\r\n                clearInterval(clonedIntervals.splice(0, 1))        \r\n                setIntervalID(clonedIntervals)  \r\n            }  \r\n        }\r\n        setAlarmDate(null)\r\n        setAlarmTime(null)\r\n        setAlarmDisplay([])\r\n        setDiscarded(true)       \r\n    }\r\n    \r\n\r\n    //get alarms from firestore\r\n    useEffect(()=>{\r\n        database.collection(\"reminders\").get()\r\n            .then(snap => {\r\n                let alarms=[]\r\n                snap.forEach(doc=>alarms.push(doc.data().alarmDisplay))\r\n                setSavedAlarms(alarms.flat())                \r\n            })\r\n    }, [setAlarmDate, setAlarmTime, setSavedAlarms])\r\n\r\n\r\n    const compareDatabaseTime = useCallback(()=>{\r\n\r\n        //sort alarms from oldest to newest\r\n        let clonedAlarms = [...savedAlarms].sort((a,b)=> a < b ? -1 : 1)  \r\n        \r\n        //convert alarms to ms\r\n        let alarmsInMs = convertDateToMs(clonedAlarms)        \r\n        \r\n        //get the smallest date\r\n        let firstAlarm = Math.min(...alarmsInMs)            \r\n        \r\n        //convert ms into date\r\n        let dbDate = new Date(firstAlarm).toLocaleDateString('en-GB')            \r\n        console.log(dbDate)\r\n\r\n        //convert ms into time\r\n        let dbTime = new Date(firstAlarm).toLocaleTimeString(\"en-GB\")\r\n        console.log(dbTime)\r\n\r\n        let todayDate = new Date().toLocaleDateString('en-GB')        \r\n        console.log(todayDate)\r\n\r\n        let todayTime = new Date().toLocaleTimeString('en-GB')        \r\n        console.log(todayTime)\r\n\r\n        const isDateEqual = todayDate === dbDate\r\n        const isTimeEqual = todayTime === dbTime\r\n\r\n        if(isDateEqual && isTimeEqual) {\r\n            let sound = new Audio(\"Audio/alarmSound.mp3\")                     \r\n            sound.play()\r\n            \r\n            setAlarmStart(true)        \r\n        }      \r\n    \r\n    }, [savedAlarms, setAlarmStart])    \r\n   \r\n     \r\n   //set new interval when page refreshes\r\n    useEffect(()=>{             \r\n            if(savedAlarms.length) {              \r\n                let interval = setInterval(compareDatabaseTime, 1000)\r\n                setNewIntervalID([interval])            \r\n            }                           \r\n    }, [compareDatabaseTime, savedAlarms.length, setNewIntervalID])   \r\n    \r\n    \r\n    \r\n    const autoRemoveReminder = useCallback(()=>{\r\n\r\n        //automatically remove reminder from firestore\r\n        database.collection(\"reminders\").orderBy(\"alarmDisplay\").limit(1).get().then(snap=>{\r\n          if(!snap.empty){\r\n            let doc = snap.docs[0]\r\n            return doc.ref.delete()\r\n          }\r\n      }) \r\n      \r\n      if(savedAlarms.length){\r\n        //trigger the new interval inside useEffect\r\n        let clonedAlarms = [...savedAlarms].sort((a,b)=> a < b ? -1 : 1)      \r\n        clonedAlarms.splice(0,1)                 \r\n        setSavedAlarms(clonedAlarms)\r\n\r\n       //clears new interval\r\n       let clonedNewIntervals = [...newIntervalID]\r\n       clearInterval(clonedNewIntervals.splice(0,1))   \r\n       setNewIntervalID(clonedNewIntervals)\r\n      }\r\n      else{\r\n        //clears old interval\r\n        let clonedIntervals = [...intervalID]       \r\n        clearInterval(clonedIntervals.splice(0,1))        \r\n        setIntervalID(clonedIntervals)\r\n      }    \r\n              \r\n    }, [savedAlarms, setSavedAlarms, intervalID, setIntervalID, newIntervalID, setNewIntervalID])\r\n         \r\n    \r\n    //if not cleared, reminder will be autoremoved after 30 sec\r\n    useEffect(()=>{        \r\n        if(alarmStart) {\r\n           let timer = setTimeout(()=>{\r\n                setAlarmStart(false)                                             \r\n                autoRemoveReminder()                                                                        \r\n            }, 30000)\r\n            \r\n            return () => {\r\n                clearTimeout(timer)\r\n              }\r\n        }\r\n    }, [alarmStart, setAlarmStart, autoRemoveReminder]) \r\n      \r\n    \r\n    \r\n    return (\r\n        <div className=\"alarm__container\">\r\n            \r\n            <Calendar \r\n                locale=\"en\" \r\n                tileClassName={[\"react-calendar\", \"react-calendar__navigation__label\"]}               \r\n                onChange={selectDate}                          \r\n            />\r\n            \r\n            <TimePicker\r\n                clearIcon={null}        \r\n                disableClock\r\n                hourPlaceholder=\"hours\"\r\n                minutePlaceholder=\"minutes\"      \r\n                onChange={selectTime}\r\n                value={alarmTime}\r\n                tileClassName={[\"react-time-picker_wrapper\"]}              \r\n            />            \r\n\r\n            <div className=\"alarm__message\">\r\n\r\n                {                  \r\n                   !alarmDate && !alarmTime && discarded ? <p>Alarm discarder. Please add new alarm.</p> :                   \r\n                   !alarmDate && !alarmTime ? \"\" :                    \r\n                   !alarmDate ? <p>Please select date.</p> :\r\n                   reminders.some(e=>e.alarmDisplay[0] === alarmDisplay[0]) ? <p>Alarm is already set!</p> : \r\n                   alarmDisplay.length && convertDateToMs(alarmDisplay) < new Date().getTime() ? <p>Alarm is not valid! Please discard it.</p> :\r\n                   alarmDisplay.length ? <p>Alarm is saved!</p> :                                                        \r\n                   alarmDisplay && alarmTime ? <p>Save alarm at {alarmDate}/{alarmTime.slice(0,5)} ?</p> : \"\"            \r\n                } \r\n                                \r\n                {\r\n                    alarmDate && alarmTime && \r\n                    <div>\r\n                        <button className=\"alarm__icon-check\" disabled={alarmDisplay.length ? true : false}>\r\n                            <AiOutlineCheck onClick={startAlarm} />\r\n                        </button>\r\n\r\n                        <AiOutlineClose onClick={discardAlarm} className=\"alarm__icon-close\"/>\r\n                    </div>\r\n                }                \r\n                                \r\n            </div>            \r\n                \r\n        </div>\r\n    )\r\n}  \r\n\r\n\r\n\r\n","import React, { useState, useContext } from 'react'\r\nimport \"./Form.css\"\r\nimport database from \"../../firebase\"\r\nimport Alarm from \"../Alarm/Alarm\"\r\nimport { StateContext } from \"../../StateProvider\"\r\nimport { MdTitle } from 'react-icons/md'\r\nimport { MdDescription } from 'react-icons/md'\r\nimport { CirclePicker } from 'react-color'\r\nimport { convertDateToMs } from \"../../utils/utils\"\r\n\r\n\r\nexport default function Form() {\r\n    const [open, setOpen] = useState(false)\r\n        \r\n    \r\n    const { \r\n        title, setTitle, \r\n        description, setDescription, \r\n        alarmDisplay, setAlarmDisplay, \r\n        setAlarmDate, setAlarmTime, \r\n        setColor, color,\r\n        intervalID, \r\n        reminders\r\n    } = useContext(StateContext) \r\n    \r\n    \r\n    const saveReminder = () =>{\r\n        database.collection(\"reminders\").add({\r\n            title: title,\r\n            description: description,                        \r\n            alarmDisplay: alarmDisplay,\r\n            intervalID: intervalID.slice(-1), \r\n            color: color,                                                    \r\n        })        \r\n\r\n        setTitle(\"\")\r\n        setDescription(\"\")\r\n        setAlarmDate(null)\r\n        setAlarmTime(null)\r\n        setAlarmDisplay([])\r\n        setColor(\"\")                    \r\n    }   \r\n    \r\n\r\n    const getColor = (color) =>{\r\n         setColor(color.hex)\r\n    } \r\n    \r\n    \r\n    return (\r\n        <div className=\"form__container\">\r\n            <h1>Add reminder</h1>\r\n\r\n            <form className=\"form\">                \r\n               <div className=\"form__box\">\r\n\r\n                    <MdTitle className=\"form__title-icon\"/>\r\n\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Add title...\" \r\n                        maxLength=\"30\"                        \r\n                        value={title} \r\n                        onChange={e=>setTitle(e.target.value)} \r\n                        \r\n                    />\r\n               </div>\r\n\r\n               { title.length===30 && <p className=\"form__title-msg\">Sorry, allowed title length is 30 characters.</p> }\r\n\r\n               <div className=\"form__box\">\r\n                    <MdDescription className=\"form__description-icon\"/>\r\n\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Add description...\" \r\n                        maxLength=\"200\" \r\n                        value={description} \r\n                        onChange={e=>setDescription(e.target.value)}                        \r\n                    />                   \r\n               </div>\r\n\r\n               { description.length===200 && <p className=\"form__description-msg\">Sorry, allowed description length is 200 characters.</p> }\r\n            </form>\r\n\r\n            <button className=\"form__btn-color\" onClick={()=>setOpen(!open)}>Select color</button>\r\n\r\n            { open && <CirclePicker width=\"220px\" circleSize={20} onChangeComplete={getColor}/>}\r\n\r\n            <Alarm/>            \r\n                \r\n            <button\r\n                className=\"form__btn\" \r\n                onClick={saveReminder} \r\n                disabled={\r\n                    !alarmDisplay.length || \r\n                    reminders.some(e=>e.alarmDisplay[0] === alarmDisplay[0]) ||\r\n                    convertDateToMs(alarmDisplay) < new Date().getTime() ? \r\n                    true : false\r\n                }\r\n                >Save reminder\r\n            </button>                       \r\n                        \r\n        </div>\r\n    )\r\n}\r\n","import { useContext } from \"react\"\r\nimport { StateContext } from \"../StateProvider\"\r\nimport database from \"../firebase\"\r\n\r\n\r\nexport default function RemoveReminderHook (){\r\n\r\n    const {         \r\n        reminders,\r\n        setAlarmStart, \r\n        intervalID, setIntervalID,\r\n        newIntervalID, setNewIntervalID,\r\n        setAlarmDisplay, \r\n        savedAlarms, setSavedAlarms                             \r\n    } = useContext(StateContext) \r\n\r\n\r\n    const removeReminder = (id, i) =>{\r\n        //delete reminder from firestore\r\n        database.collection(\"reminders\").doc(id).delete()             \r\n                \r\n        \r\n        //page doesn't refresh - take care of the intervals \r\n        let clonedIntervals = [...intervalID]\r\n        let removedIntervals = []\r\n        let filteredIntervals = []       \r\n        removedIntervals = clonedIntervals.filter(e=>e === reminders[i].intervalID[0])\r\n        filteredIntervals = clonedIntervals.filter(e=>e !== reminders[i].intervalID[0]) \r\n        \r\n        clearInterval(removedIntervals)               \r\n        setIntervalID(filteredIntervals)\r\n       \r\n        \r\n        //page refresh - take care of new intervals\r\n        let clonedNewIntervals = [...newIntervalID]\r\n\r\n        clearInterval(clonedNewIntervals.splice(0,1))        \r\n        setNewIntervalID(clonedNewIntervals)         \r\n        \r\n        //remove saved alarm & trigger the new setInterval inside useEffect\r\n        let clonedAlarms = [...savedAlarms]\r\n        let filteredAlarms = clonedAlarms.filter(e=>e !== reminders[i].alarmDisplay[0])               \r\n        setSavedAlarms(filteredAlarms) \r\n        \r\n        //notification will be removed only if its oldest alarm/last reminder\r\n        if(reminders[reminders.length-1].id === reminders[i].id) setAlarmStart(false)       \r\n\r\n        setAlarmDisplay([])       \r\n    } \r\n    \r\n    return removeReminder\r\n}\r\n\r\n/* \r\nconsole.log(\"cloned\", clonedIntervals)              \r\nconsole.log(\"removed\", removedIntervals)              \r\nconsole.log(\"filtered\", filteredIntervals)        \r\nconsole.log(\"new cloned\", clonedNewIntervals)\r\nconsole.log(\"old\", intervalID) \r\nconsole.log(\"new\", newIntervalID)\r\n*/\r\n\r\n    \r\n\r\n   \r\n\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport \"./Reminder.css\"\r\nimport database from \"../../firebase\"\r\nimport { StateContext } from \"../../StateProvider\"\r\nimport useRemoveReminder from \"../../hooks/removeHook\"\r\n\r\nexport default function Reminder() { \r\n    const [editTitle, setEditTitle] = useState(false)  \r\n    const [editDescription, setEditDescription] = useState(false)\r\n    const [id, setId] = useState(null)  \r\n    \r\n     \r\n    const { \r\n        title, setTitle, \r\n        description, setDescription, \r\n        reminders, setReminders                     \r\n    } = useContext(StateContext)    \r\n    \r\n    \r\n    //get reminders from firestore\r\n    useEffect(() => {\r\n        database.collection(\"reminders\").orderBy(\"alarmDisplay\", \"desc\").onSnapshot(reminder => \r\n            setReminders(reminder.docs.map(e=>({...e.data(), id: e.id})))\r\n        )        \r\n    }, [setReminders]) \r\n    \r\n    \r\n    const handleTitle = (id) =>{\r\n        setId(id)\r\n        setEditTitle(true)              \r\n    }\r\n\r\n\r\n    const handleDescription = (id) =>{\r\n        setId(id)\r\n        setEditDescription(true)      \r\n    }\r\n    \r\n\r\n    const updateTitle = (id) =>{        \r\n        database.collection(\"reminders\").doc(id).update({title: title})      \r\n        setEditTitle(false)\r\n        setTitle(\"\")        \r\n    }\r\n\r\n\r\n    const updateDescription = (id) =>{\r\n        database.collection(\"reminders\").doc(id).update({description: description})\r\n        setEditDescription(false)\r\n        setDescription(\"\")\r\n    } \r\n    \r\n    const removeCallback = useRemoveReminder()    \r\n    \r\n    \r\n    return (\r\n        <div className=\"reminder__container\">\r\n            <h1>Your Reminders</h1>\r\n\r\n            {\r\n               reminders.map((reminder, i)=>\r\n                <div key={i} className=\"reminder__box\" style={{borderColor: reminder.color}}>\r\n\r\n                    <button \r\n                        className=\"reminder__btn\"\r\n                        onClick={()=>removeCallback(reminder.id, i)}\r\n                    >\r\n                        ✕\r\n                    </button>\r\n                             \r\n                    {\r\n                       editTitle && (id === reminder.id) ?\r\n\r\n                        <div>\r\n                            <input                                 \r\n                                type=\"text\"\r\n                                placeholder=\"edit...\" \r\n                                maxLength=\"30\"\r\n                                value={title} \r\n                                onChange={e=>setTitle(e.target.value)}                                \r\n                                autoFocus\r\n                            />\r\n\r\n                            <button \r\n                                onClick={()=>updateTitle(reminder.id)} \r\n                                className=\"reminder__update\"\r\n                            >\r\n                                Update\r\n                            </button>\r\n\r\n                            <button \r\n                                onClick={()=>setEditTitle(false)} \r\n                                className=\"reminder__cancel\"\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div> :\r\n                        \r\n\r\n                        <div \r\n                            onClick={()=>handleTitle(reminder.id)} \r\n                            className=\"reminder__title\"\r\n                        >\r\n                            {reminder.title}\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        editDescription && (id === reminder.id) ?\r\n\r\n                        <div>\r\n                            <textarea \r\n                                type=\"text\"\r\n                                placeholder=\"edit...\"\r\n                                maxLength=\"200\"  \r\n                                value={description}  \r\n                                onChange={e=>setDescription(e.target.value)} \r\n                                autoFocus\r\n                            />\r\n\r\n                            <button \r\n                                onClick={()=>updateDescription(reminder.id)} \r\n                                className=\"reminder__update\"\r\n                            >\r\n                                Update\r\n                            </button>\r\n\r\n                            <button \r\n                                onClick={()=>setEditDescription(false)} \r\n                                className=\"reminder__cancel\"\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div> :\r\n\r\n                        <div \r\n                            onClick={()=>handleDescription(reminder.id)} \r\n                            className=\"reminder__description\"\r\n                        >\r\n                            {reminder.description}\r\n                        </div>\r\n\r\n                    }    \r\n                   \r\n                                                          \r\n\r\n                    {\r\n                        reminder.alarmDisplay.map((alarm,i)=>\r\n                        <p key={i}>\r\n                            {alarm.slice(0,-3)}                       \r\n                        </p>\r\n                        )\r\n                    }                    \r\n\r\n                </div>\r\n           )}           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n ","import React, { useContext } from 'react'\r\nimport \"./Notification.css\"\r\nimport { motion } from \"framer-motion\"\r\nimport { StateContext } from \"../../StateProvider\"\r\nimport useRemoveReminder from \"../../hooks/removeHook\"\r\n\r\nexport default function Notification() {\r\n    \r\n    const colors = [\"#607d8b\", \"#795548\", \"#3f51b5\", \"#673ab7\"]\r\n    \r\n    const { reminders, alarmStart } = useContext(StateContext)\r\n    \r\n    const removeCallback = useRemoveReminder()  \r\n    \r\n    \r\n    return (        \r\n        <div className=\"notification__container\">\r\n            {\r\n                reminders[reminders.length-1] && alarmStart &&    \r\n                    <motion.div                    \r\n                        className=\"notification\"\r\n                        style={{backgroundColor: reminders[reminders.length-1].color}}\r\n                        animate={{ translateX: [80, -80, 60, -60, 40, -40, reminders.length-1]}}\r\n                    >\r\n                        <p \r\n                            style={\r\n                                colors.includes(reminders[reminders.length-1].color) ? \r\n                                {color: \"#ffffff\"} : {color: \"#000000\"}\r\n                            }\r\n                        >\r\n                            Reminder for: <br></br> \r\n                            <strong>\r\n                                {\r\n                                    reminders[reminders.length-1].title.length > 15 ? \r\n                                    reminders[reminders.length-1].title.slice(0,15) + \"...\" : \r\n                                    reminders[reminders.length-1].title\r\n                                }\r\n                            </strong> <br></br> at {reminders[reminders.length-1].alarmDisplay[0].slice(0,-3)}                            \r\n                        </p>\r\n\r\n                        <button\r\n                            className=\"notification__btn\" \r\n                            onClick={()=>removeCallback(reminders[reminders.length-1].id, reminders.length-1)}\r\n                            style={\r\n                                colors.includes(reminders[reminders.length-1].color) ? \r\n                                {color: \"#ffffff\"} : {color: \"#000000\"}\r\n                            }\r\n                        >\r\n                            ✕\r\n                        </button>           \r\n                    </motion.div>\r\n            }\r\n        </div>        \r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport Form from \"./components/Form/Form\"\nimport Reminder from \"./components/Reminder/Reminder\"\nimport Notification from \"./components/Notification/Notification\"\nimport { BiWindowOpen } from \"react-icons/bi\"\nimport { BiWindowClose } from \"react-icons/bi\"\nimport { motion } from \"framer-motion\"\n\n\nfunction App() {\n  const [open, setOpen] = useState(false)    \n  \n  const variants = {\n    open: { opacity: 1, y: 0 },\n    closed: { opacity: 0, y: \"100%\" }    \n  } \n  \n  const bounce = {\n    duration: 0.3,\n    yoyo: Infinity,\n    ease: \"easeOut\"\n  }  \n    \n\n  return (\n    <div className=\"App\">\n      \n      {\n        open ? \n\n        <BiWindowClose className=\"App__btn-close\" onClick={()=>setOpen(false)}/> :\n\n        <motion.div\n          className=\"App__btn-open\"\n          transition={bounce}        \n          animate={{y: [\"15%\", \"-15%\"]}}\n        >          \n          <BiWindowOpen onClick={()=>setOpen(true)}/>          \n        </motion.div>\n      }     \n      \n        <motion.div\n          animate={open ? \"open\" : \"closed\"}\n          variants={variants} \n          className=\"App__container\"\n        >\n            <div className=\"App__left\">\n              <Form/>\n            </div>\n            \n            <div className=\"App__right\">\n              <Reminder/>\n            </div>\n        </motion.div>       \n                          \n        <Notification/>\n\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport StateProvider from \"../src/StateProvider\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n    <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}